
##################################Twitch Action Spippet

using OTG.CombatSM.Core;
using UnityEngine;

namespace OTG.TwitchFighter
{
    public class SetDashDistance:TwitchFighterBaseAction
    {
        protected override void Awake()
        {
            m_combatActionType = E_ActionType.MovementBased;
            m_processType = E_ProcessType.SetParameter;
            base.Awake();
        }
        public override void Act(OTGCombatSMC _controller)
        {
            TwitchMovementParams twitch = _controller.Handler_Movement.TwitchParams;
            TwitchFighterCombatParams twitchCombat = _controller.Handler_Combat.TwitchCombat;
             TwitchFighterInput twitchInput = _controller.Handler_Input.TwitchInput;
            
        }
    }
}



#########################################END



using OTG.CombatSM.Core;
using UnityEngine;

namespace OTG.TwitchFighter
{
    public class HasReachedDesiredDashDistance : TwitchFighterBaseTransition
    {
        protected override void Awake()
        {
            m_transitionDecisionType = E_TransitionDecisionType.Movement;
            base.Awake();
        }
        public override bool Decide(OTGCombatSMC _controller)
        {
            TwitchMovementParams twitch = _controller.Handler_Movement.TwitchParams;
             TwitchFighterCombatParams twitchCOmbat = _controller.Handler_Combat.TwitchCombat;
            
        }
    }
}


##################################################

using UnityEngine;
using OTG.EventSystem.Core;

namespace OTG.TwitchFighter
{

    [CreateAssetMenu(menuName = "TwitchFighter/Events/ComboCounterUpdatedEvent")]
    public class ComboCounterUpdatedEvent : OTGEvent<int>
    {
        
        public override void Raise(int t)
        {
            for(int i = 0; i < m_listeners.Count; i++)
            {
                m_listeners[i].OnEventRaised(t);
            }
        }
    }
}


#################################################


using UnityEngine;
using OTG.EventSystem.Core;
using UnityEngine.Events;

namespace OTG.TwitchFighter
{
    public class ComboCounterEventListener : OTGEventListener<int>
    {
        [SerializeField] private ComboCounterUnityEvent m_unityEvent;
        [SerializeField] private ComboCounterUpdatedEvent m_event;

        public override void OnDisable()
        {
            m_event.RemoveListener(this);
        }

        public override void OnEnable()
        {
            m_event.AddListener(this);
        }

        public override void OnEventRaised(int t)
        {
            m_unityEvent.Invoke(t);
        }
    }

     [System.Serializable]
    public class ComboCounterUnityEvent : UnityEvent<int> { }

}
